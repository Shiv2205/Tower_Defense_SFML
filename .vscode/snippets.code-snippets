{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

 "Header Guard": 
  {
    "prefix": "headerguard",
    "body": 
    [
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "",
      "$0",
      "",
      "#endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
    ],
    "description": "Header guard for C++ header files"
  },

  "Class Init": 
  {
    "prefix": "class",
    "body": 
    [
      "class ${TM_FILENAME_BASE/[^A-Za-z0-9]/_/g}",
      "{",
      "public:",
      " ${TM_FILENAME_BASE/[^A-Za-z0-9]/_/g}();",
      " ~${TM_FILENAME_BASE/[^A-Za-z0-9]/_/g}();",
      "",
      "private:",
      "",
      "}"
    ],
    "description": "Template for C++ classes"
  },

  "Getter and Setter H": {
    "prefix": "getset_h",
    "body": [
      "// Getter and Setter for ${1:type} ${2:variable}",
      "${1:type} get${3:camel}() const;",
      "void set${3:camel}(const ${1:type}& ${2});"
    ],
    "description": "Generates a getter and setter for a class member variable for the header file."
  },
  
  "Getter and Setter CPP": {
    "prefix": "getset_cpp",
    "body": [
      "// Getter and Setter for ${1:type} ${2:variable}",
      "${1:type} ${3:Class}::get${2/(.)(.*)/${1:/upcase}${2}/}() const \n{\n  return this->${4:snake}; \n}\n",
      "void ${3:Class}::set${2/(.)(.*)/${1:/upcase}${2}/}(const ${1:type}& ${4}) \n{\n  this->${4:snake} = ${4}; \n}\n"
    ],
    "description": "Generates a getter and setter for a class member variable for the cpp file."
  }
}